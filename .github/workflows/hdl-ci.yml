name: HDL CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  verify:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y iverilog verilator python3-pip jq wget
          pip3 install requests

      - name: Run linting
        run: |
          # Install Verible
          set -e  # Exit on any error
          
          echo "Fetching latest Verible release..."
          LATEST_RELEASE=$(curl -s https://api.github.com/repos/chipsalliance/verible/releases/latest | grep "tag_name" | cut -d'"' -f4)
          if [ -z "$LATEST_RELEASE" ]; then
            echo "Error: Could not fetch latest release version"
            exit 1
          fi
          
          echo "Downloading Verible ${LATEST_RELEASE}..."
          wget -q https://github.com/chipsalliance/verible/releases/download/${LATEST_RELEASE}/verible-${LATEST_RELEASE}-linux-static-x86_64.tar.gz
          if [ ! -f "verible-${LATEST_RELEASE}-linux-static-x86_64.tar.gz" ]; then
            echo "Error: Failed to download Verible"
            exit 1
          fi
          
          echo "Extracting Verible..."
          tar xzf verible-${LATEST_RELEASE}-linux-static-x86_64.tar.gz
          if [ ! -d "verible-${LATEST_RELEASE}" ]; then
            echo "Error: Failed to extract Verible"
            exit 1
          fi
          
          echo "Installing Verible..."
          sudo cp verible-${LATEST_RELEASE}/bin/* /usr/local/bin/
          
          echo "Cleaning up..."
          rm -rf verible-${LATEST_RELEASE} verible-${LATEST_RELEASE}-linux-static-x86_64.tar.gz
          
          echo "Running Verible lint..."
          # Find all Verilog files and run linting
          VERILOG_FILES=$(find . -name "*.v" -o -name "*.sv" 2>/dev/null || true)
          if [ -z "$VERILOG_FILES" ]; then
            echo "No Verilog files found to lint"
            exit 0
          fi
          echo "$VERILOG_FILES" | xargs verible-verilog-lint

      - name: Run simulation
        run: |
          cd examples/counter
          iverilog -o testbench.vvp counter.v counter_tb.v
          vvp testbench.vvp

      - name: Upload waveform
        if: success()
        run: |
          cd examples/counter
          # Upload VCD to ts-verilog-simulator
          WAVEFORM_ID=$(curl -s -F "file=@waveform.vcd" http://localhost:3000/api/v1/waveform/upload | jq -r '.waveform_id')
          echo "WAVEFORM_ID=$WAVEFORM_ID" >> $GITHUB_ENV

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const waveformUrl = `https://ts-verilog-simulator-frontend.vercel.app/waveform/${process.env.WAVEFORM_ID}`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `âœ… Simulation completed successfully!\n\nView waveform: ${waveformUrl}`
            }); 